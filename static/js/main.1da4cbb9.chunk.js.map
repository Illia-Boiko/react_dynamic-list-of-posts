{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","api/users.ts","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["PostsList","props","posts","onChangePostId","selectedPostId","className","map","post","userId","title","type","classNames","PostsList__button","button","id","onClick","BASE_URL","getPostComments","postId","a","fetch","comments","ok","json","addNewComment","comment","method","body","JSON","stringify","headers","newCommentToServer","deleteCommentFromServer","commentId","deleted","NewCommentForm","updateComment","initialComment","name","email","useState","setComment","handleChange","event","target","value","handleSubmit","preventDefault","onSubmit","required","placeholder","onChange","PostDetails","setComments","isVisibleComments","setIsVisibleComments","forUpdateComments","setForUpdateComments","useEffect","selectedPostComments","deleteComment","length","getUserPosts","response","get","includes","getPostDetails","createdAt","updatedAt","getUsers","users","UserSelect","setUsers","usersFromServer","user","App","setPosts","selectedUser","setSelectedUser","selectedPost","setSelectedPost","setSelectedPostId","isPostDetailsVisible","setIsPostDetailsVisible","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1da4cbb9.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  onChangePostId: (postId: number) => void;\n  selectedPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { posts, onChangePostId, selectedPostId } = props;\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User #${post.userId}]`}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                {\n                  PostsList__button: true,\n                  button: true,\n                  'button--active': selectedPostId === post.id,\n                },\n              )}\n              onClick={() => onChangePostId(post.id)}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const comments = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (comments.ok) {\n    return comments.json();\n  }\n\n  return [];\n};\n\nexport const addNewComment = async (comment: Partial<Comment>) => {\n  const newCommentToServer = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return newCommentToServer.json();\n};\n\nexport const deleteCommentFromServer = async (commentId: number) => {\n  const deleted = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  return deleted;\n};\n","import React, { useState } from 'react';\nimport { addNewComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number | undefined;\n  updateComment: () => void\n};\n\ntype Event = React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>;\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { selectedPostId, updateComment } = props;\n  const initialComment = {\n    postId: selectedPostId,\n    name: '',\n    body: '',\n    email: '',\n  };\n  const [comment, setComment] = useState<Partial<Comment>>(initialComment);\n\n  const handleChange = (event: Event) => {\n    const { name, value } = event.target;\n\n    setComment({\n      ...comment,\n      [name]: value,\n    } as keyof Comment);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    await addNewComment(comment);\n    setComment(initialComment);\n    updateComment();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={comment.name}\n          required\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={comment.email}\n          required\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment.body}\n          required\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteCommentFromServer, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  post: Partial<Post>;\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { post, selectedPostId } = props;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isVisibleComments, setIsVisibleComments] = useState(true);\n  const [forUpdateComments, setForUpdateComments] = useState(true);\n\n  const changeCommentsVisibility = () => {\n    setIsVisibleComments(!isVisibleComments);\n  };\n\n  useEffect(() => {\n    (async () => {\n      const selectedPostComments = await getPostComments(post.id || 0);\n\n      setComments(selectedPostComments);\n    })();\n  }, [post, forUpdateComments]);\n\n  const updateComment = () => {\n    setForUpdateComments(!forUpdateComments);\n  };\n\n  const deleteComment = async (commentId: number) => {\n    await deleteCommentFromServer(commentId);\n    updateComment();\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {post.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={changeCommentsVisibility}\n          >\n            {isVisibleComments\n              ? 'Hide '\n              : 'Show '}\n            {`${comments.length} comments`}\n          </button>\n        ) : (\n          'There are no comments yet'\n        )}\n        <ul className=\"PostDetails__list\">\n          {isVisibleComments && (\n            comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            updateComment={updateComment}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  const response = userId !== 0\n    ? await fetch(`${BASE_URL}/posts?userId=${userId}`)\n    : await fetch(`${BASE_URL}/posts`);\n\n  if (response.ok\n    && response.headers\n      .get('content-type')\n      ?.includes('application/json')) {\n    return response.json();\n  }\n\n  return [];\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  if (response.ok\n    && response.headers\n      .get('content-type')\n      ?.includes('application/json')) {\n    return response.json();\n  }\n\n  return {\n    id: 0,\n    userId: 0,\n    body: '',\n    title: '',\n    createdAt: '',\n    updatedAt: '',\n  };\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const users = await fetch(`${BASE_URL}/users`);\n\n  if (!users.ok) {\n    return [];\n  }\n\n  return users.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../../api/users';\n\ntype Props = {\n  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n};\n\nexport const UserSelect: React.FC<Props> = (props) => {\n  const { onChange } = props;\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    })();\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        onChange={onChange}\n      >\n        <option value=\"0\">All users</option>\n        {users.map(user => (\n          <option\n            value={user.id}\n            key={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPostDetails, getUserPosts } from './api/posts';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPost, setSelectedPost] = useState<Partial<Post>>({});\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isPostDetailsVisible, setIsPostDetailsVisible] = useState(false);\n\n  useEffect(() => {\n    if (selectedPostId === 0) {\n      setIsPostDetailsVisible(false);\n    } else {\n      setIsPostDetailsVisible(true);\n    }\n\n    (async () => {\n      const postsFromServer = await getUserPosts(selectedUser);\n      const post = await getPostDetails(selectedPostId);\n\n      setPosts(postsFromServer);\n      setSelectedPost(post);\n    })();\n  }, [selectedUser, selectedPostId]);\n\n  const changePostUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUser(+value);\n  };\n\n  const changeSelectedPostId = (postId: number) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          onChange={changePostUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onChangePostId={changeSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n        {isPostDetailsVisible && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPostId={selectedPostId}\n              post={selectedPost}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}