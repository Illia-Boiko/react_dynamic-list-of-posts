{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","api/users.ts","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["PostsList","props","posts","onChangePostId","selectedPostId","className","map","post","userId","title","type","classNames","PostsList__button","button","id","onClick","BASE_URL","getPostComments","postId","a","fetch","comments","ok","json","addNewComment","comment","method","body","JSON","stringify","headers","newCommentToServer","console","log","email","name","NewCommentForm","placeholder","PostDetails","useState","setComments","isVisibleComments","setIsVisibleComments","useEffect","selectedPostComments","length","getUserPosts","response","get","includes","getPostDetails","createdAt","updatedAt","getUsers","users","UserSelect","onChange","setUsers","usersFromServer","value","user","App","setPosts","selectedUser","setSelectedUser","selectedPost","setSelectedPost","setSelectedPostId","isPostDetailsVisible","setIsPostDetailsVisible","postsFromServer","event","target","ReactDOM","render","document","getElementById"],"mappings":"mWAUaA,EAA6B,SAACC,GACzC,IAAQC,EAA0CD,EAA1CC,MAAOC,EAAmCF,EAAnCE,eAAgBC,EAAmBH,EAAnBG,eAE/B,OACE,sBAAKC,UAAU,YAAf,UACE,wCACA,oBAAIA,UAAU,kBAAd,SACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBACEF,UAAU,kBADZ,UAIE,gCACE,6CAAcE,EAAKC,OAAnB,OACCD,EAAKE,SAER,wBACEC,KAAK,SACLL,UAAWM,IACT,CACEC,mBAAmB,EACnBC,QAAQ,EACR,iBAAkBT,IAAmBG,EAAKO,KAG9CC,QAAS,kBAAMZ,EAAeI,EAAKO,KATrC,SAWGV,IAAmBG,EAAKO,GACrB,QACA,WAnBDP,EAAKO,aCpBTE,EAAW,oCCEXC,EAAe,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACNC,MAAM,GAAD,OAAIJ,EAAJ,4BAAgCE,IAD/B,YACvBG,EADuB,QAGhBC,GAHgB,yCAIpBD,EAASE,QAJW,gCAOtB,IAPsB,2CAAH,sDAUfC,EAAa,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACMC,MAAM,GAAD,OAAIJ,EAAJ,aAAyB,CAC7DU,OAAQ,OACRC,KAAMC,KAAKC,UAAUJ,GACrBK,QAAS,CACP,eAAgB,qCALO,cACrBC,EADqB,yBASpBA,EAAmBR,QATC,2CAAH,sDAqB1BS,QAAQC,IAAIT,EATyB,CACnCV,GAAI,aACJI,OAAQ,EACRgB,MAAO,QACPP,KAAM,OACNQ,KAAM,U,UC1BKC,EAA2B,kBACtC,uBAAM/B,UAAU,iBAAhB,UACE,qBAAKA,UAAU,aAAf,SACE,uBACEK,KAAK,OACLyB,KAAK,OACLE,YAAY,YACZhC,UAAU,4BAId,qBAAKA,UAAU,aAAf,SACE,uBACEK,KAAK,OACLyB,KAAK,QACLE,YAAY,aACZhC,UAAU,4BAId,qBAAKA,UAAU,aAAf,SACE,0BACE8B,KAAK,OACLE,YAAY,oBACZhC,UAAU,4BAId,wBACEK,KAAK,SACLL,UAAU,uCAFZ,+BCtBSiC,G,MAA+B,SAACrC,GAC3C,IAAQM,EAASN,EAATM,KACR,EAAgCgC,mBAAoB,IAApD,mBAAOlB,EAAP,KAAiBmB,EAAjB,KACA,EAAkDD,oBAAS,GAA3D,mBAAOE,EAAP,KAA0BC,EAA1B,KAcA,OARAC,qBAAU,WACR,sBAAC,4BAAAxB,EAAA,sEACoCF,EAAgBV,EAAKO,IAAM,GAD/D,OACO8B,EADP,OAGCJ,EAAYI,GAHb,0CAAD,KAKC,CAACrC,IAGF,sBAAKF,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,4BACGE,EAAKoB,SAIV,0BAAStB,UAAU,wBAAnB,UACGgB,EAASwB,OAAS,EACjB,yBACEnC,KAAK,SACLL,UAAU,SACVU,QA3BuB,WAC/B2B,GAAsBD,IAuBhB,UAKGA,EACG,QACA,QAPN,UAQMpB,EAASwB,OARf,gBAWA,4BAEF,oBAAIxC,UAAU,oBAAd,SACGoC,GACCpB,EAASf,KAAI,SAAAmB,GAAO,OAClB,qBACEpB,UAAU,yBADZ,UAIE,wBACEK,KAAK,SACLL,UAAU,oCAFZ,eAMA,4BAAIoB,EAAQE,SARPF,EAAQX,YAevB,kCACE,qBAAKT,UAAU,4BAAf,SACE,cAAC,EAAD,aCvEGyC,EAAY,uCAAG,WAAOtC,GAAP,iBAAAW,EAAA,yDACE,IAAXX,EADS,gCAEhBY,MAAM,GAAD,OAAIJ,EAAJ,yBAA6BR,IAFlB,yDAGhBY,MAAM,GAAD,OAAIJ,EAAJ,WAHW,+BACpB+B,EADoB,MAKbzB,MAAT,UACCyB,EAASjB,QACTkB,IAAI,uBAFL,aACC,EAECC,SAAS,qBARW,0CASjBF,EAASxB,QATQ,iCAYnB,IAZmB,4CAAH,sDAeZ2B,EAAc,uCAAG,WAAOhC,GAAP,iBAAAC,EAAA,sEACLC,MAAM,GAAD,OAAIJ,EAAJ,kBAAsBE,IADtB,YACtB6B,EADsB,QAGfzB,MAAT,UACCyB,EAASjB,QACTkB,IAAI,uBAFL,aACC,EAECC,SAAS,qBANa,yCAOnBF,EAASxB,QAPU,gCAUrB,CACLT,GAAI,EACJN,OAAQ,EACRmB,KAAM,GACNlB,MAAO,GACP0C,UAAW,GACXC,UAAW,KAhBe,2CAAH,sDCfdC,EAAQ,uCAAG,4BAAAlC,EAAA,sEACFC,MAAM,GAAD,OAAIJ,EAAJ,WADH,WAChBsC,EADgB,QAGXhC,GAHW,yCAIb,IAJa,gCAOfgC,EAAM/B,QAPS,2CAAH,qDCKRgC,EAA8B,SAACtD,GAC1C,IAAQuD,EAAavD,EAAbuD,SACR,EAA0BjB,mBAAiB,IAA3C,mBAAOe,EAAP,KAAcG,EAAd,KAUA,OARAd,qBAAU,WACR,sBAAC,4BAAAxB,EAAA,sEAC+BkC,IAD/B,OACOK,EADP,OAGCD,EAASC,GAHV,0CAAD,KAKC,IAGD,wDAGE,yBACErD,UAAU,qBACVmD,SAAUA,EAFZ,UAIE,wBAAQG,MAAM,IAAd,uBACCL,EAAMhD,KAAI,SAAAsD,GAAI,OACb,wBACED,MAAOC,EAAK9C,GADd,SAIG8C,EAAKzB,MAFDyB,EAAK9C,cC0CP+C,EAjEO,WACpB,MAA0BtB,mBAAiB,IAA3C,mBAAOrC,EAAP,KAAc4D,EAAd,KACA,EAAwCvB,mBAAS,GAAjD,mBAAOwB,EAAP,KAAqBC,EAArB,KACA,EAAwCzB,mBAAwB,IAAhE,mBAAO0B,EAAP,KAAqBC,EAArB,KACA,EAA4C3B,mBAAS,GAArD,mBAAOnC,EAAP,KAAuB+D,EAAvB,KACA,EAAwD5B,oBAAS,GAAjE,mBAAO6B,EAAP,KAA6BC,EAA7B,KAEA1B,qBAAU,WAEN0B,EADqB,IAAnBjE,GAMJ,sBAAC,8BAAAe,EAAA,sEAC+B2B,EAAaiB,GAD5C,cACOO,EADP,gBAEoBpB,EAAe9C,GAFnC,OAEOG,EAFP,OAICuD,EAASQ,GACTJ,EAAgB3D,GALjB,0CAAD,KAOC,CAACwD,EAAc3D,IAgBlB,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,cAAC,EAAD,CACEmD,SAlBiB,SAACe,GACxB,IAAQZ,EAAUY,EAAMC,OAAhBb,MAERK,GAAiBL,QAmBf,uBAAMtD,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,MAAOA,EACPC,eApBmB,SAACe,GAE1BiD,EADEjD,IAAWd,EACK,EAEAc,IAiBZd,eAAgBA,MAGnBgE,GACC,qBAAK/D,UAAU,eAAf,SACE,cAAC,EAAD,CACEE,KAAM0D,aC5DpBQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f7eabe92.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  onChangePostId: (postId: number) => void;\n  selectedPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { posts, onChangePostId, selectedPostId } = props;\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User #${post.userId}]`}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                {\n                  PostsList__button: true,\n                  button: true,\n                  'button--active': selectedPostId === post.id,\n                },\n              )}\n              onClick={() => onChangePostId(post.id)}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const comments = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (comments.ok) {\n    return comments.json();\n  }\n\n  return [];\n};\n\nexport const addNewComment = async (comment: Partial<Comment>) => {\n  const newCommentToServer = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return newCommentToServer.json();\n};\n\nconst newComment: Partial<Comment> = {\n  id: 327493848934,\n  postId: 4,\n  email: 'email',\n  body: 'body',\n  name: 'name',\n};\n\n//  eslint-disable-next-line no-console\nconsole.log(addNewComment(newComment));\n","import React from 'react';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => (\n  <form className=\"NewCommentForm\">\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Your name\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"email\"\n        placeholder=\"Your email\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <textarea\n        name=\"body\"\n        placeholder=\"Type comment here\"\n        className=\"NewCommentForm__input\"\n      />\n    </div>\n\n    <button\n      type=\"submit\"\n      className=\"NewCommentForm__submit-button button\"\n    >\n      Add a comment\n    </button>\n  </form>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  post: Partial<Post>;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { post } = props;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isVisibleComments, setIsVisibleComments] = useState(true);\n\n  const changeCommentsVisibility = () => {\n    setIsVisibleComments(!isVisibleComments);\n  };\n\n  useEffect(() => {\n    (async () => {\n      const selectedPostComments = await getPostComments(post.id || 0);\n\n      setComments(selectedPostComments);\n    })();\n  }, [post]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {post.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={changeCommentsVisibility}\n          >\n            {isVisibleComments\n              ? 'Hide '\n              : 'Show '}\n            {`${comments.length} comments`}\n          </button>\n        ) : (\n          'There are no comments yet'\n        )}\n        <ul className=\"PostDetails__list\">\n          {isVisibleComments && (\n            comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  const response = userId !== 0\n    ? await fetch(`${BASE_URL}/posts?userId=${userId}`)\n    : await fetch(`${BASE_URL}/posts`);\n\n  if (response.ok\n    && response.headers\n      .get('content-type')\n      ?.includes('application/json')) {\n    return response.json();\n  }\n\n  return [];\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  if (response.ok\n    && response.headers\n      .get('content-type')\n      ?.includes('application/json')) {\n    return response.json();\n  }\n\n  return {\n    id: 0,\n    userId: 0,\n    body: '',\n    title: '',\n    createdAt: '',\n    updatedAt: '',\n  };\n};\n","import { BASE_URL } from './api';\n\nexport const getUsers = async () => {\n  const users = await fetch(`${BASE_URL}/users`);\n\n  if (!users.ok) {\n    return [];\n  }\n\n  return users.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../../api/users';\n\ntype Props = {\n  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n};\n\nexport const UserSelect: React.FC<Props> = (props) => {\n  const { onChange } = props;\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    })();\n  }, []);\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        onChange={onChange}\n      >\n        <option value=\"0\">All users</option>\n        {users.map(user => (\n          <option\n            value={user.id}\n            key={user.id}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPostDetails, getUserPosts } from './api/posts';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPost, setSelectedPost] = useState<Partial<Post>>({});\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isPostDetailsVisible, setIsPostDetailsVisible] = useState(false);\n\n  useEffect(() => {\n    if (selectedPostId === 0) {\n      setIsPostDetailsVisible(false);\n    } else {\n      setIsPostDetailsVisible(true);\n    }\n\n    (async () => {\n      const postsFromServer = await getUserPosts(selectedUser);\n      const post = await getPostDetails(selectedPostId);\n\n      setPosts(postsFromServer);\n      setSelectedPost(post);\n    })();\n  }, [selectedUser, selectedPostId]);\n\n  const changePostUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUser(+value);\n  };\n\n  const changeSelectedPostId = (postId: number) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          onChange={changePostUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onChangePostId={changeSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n        {isPostDetailsVisible && (\n          <div className=\"App__content\">\n            <PostDetails\n              post={selectedPost}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}